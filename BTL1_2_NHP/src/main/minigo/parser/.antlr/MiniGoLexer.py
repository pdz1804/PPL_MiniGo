# Generated from e:/2_LEARNING_BKU/2_File_2/K22_HK242/pplvt/BTL2_NHP - Copy/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,62,533,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,
        1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,
        1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
        1,48,1,49,1,49,1,50,1,50,1,51,1,51,5,51,345,8,51,10,51,12,51,348,
        9,51,1,52,1,52,1,52,1,52,3,52,354,8,52,1,53,1,53,1,53,5,53,359,8,
        53,10,53,12,53,362,9,53,3,53,364,8,53,1,54,1,54,1,54,1,54,3,54,370,
        8,54,1,54,4,54,373,8,54,11,54,12,54,374,1,55,1,55,1,55,1,55,3,55,
        381,8,55,1,55,4,55,384,8,55,11,55,12,55,385,1,56,1,56,1,56,1,56,
        3,56,392,8,56,1,56,4,56,395,8,56,11,56,12,56,396,1,57,1,57,1,58,
        1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,5,61,410,8,61,10,61,12,61,
        413,9,61,3,61,415,8,61,1,61,4,61,418,8,61,11,61,12,61,419,1,61,1,
        61,5,61,424,8,61,10,61,12,61,427,9,61,1,61,3,61,430,8,61,3,61,432,
        8,61,1,62,1,62,4,62,436,8,62,11,62,12,62,437,1,62,1,62,4,62,442,
        8,62,11,62,12,62,443,3,62,446,8,62,1,63,1,63,1,64,1,64,5,64,452,
        8,64,10,64,12,64,455,9,64,1,64,1,64,1,65,1,65,3,65,461,8,65,1,66,
        1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,68,5,68,473,8,68,10,68,
        12,68,476,9,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,5,69,485,8,69,
        10,69,12,69,488,9,69,1,69,1,69,1,69,1,69,1,69,1,70,4,70,496,8,70,
        11,70,12,70,497,1,70,1,70,1,71,3,71,503,8,71,1,71,1,71,1,72,1,72,
        1,72,1,73,1,73,5,73,512,8,73,10,73,12,73,515,9,73,1,73,1,73,1,73,
        3,73,520,8,73,1,73,1,73,1,74,1,74,5,74,526,8,74,10,74,12,74,529,
        9,74,1,74,1,74,1,74,1,486,0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,
        54,125,0,127,0,129,55,131,0,133,0,135,0,137,56,139,57,141,58,143,
        59,145,60,147,61,149,62,1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,48,49,1,0,48,55,3,0,48,
        57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,34,34,
        39,39,92,92,5,0,34,34,92,92,110,110,114,114,116,116,2,0,10,10,12,
        13,3,0,9,9,12,13,32,32,1,1,10,10,550,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
        0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,0,123,1,0,0,0,0,129,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,
        0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,
        0,0,0,1,151,1,0,0,0,3,154,1,0,0,0,5,159,1,0,0,0,7,163,1,0,0,0,9,
        170,1,0,0,0,11,175,1,0,0,0,13,180,1,0,0,0,15,187,1,0,0,0,17,197,
        1,0,0,0,19,204,1,0,0,0,21,208,1,0,0,0,23,214,1,0,0,0,25,222,1,0,
        0,0,27,228,1,0,0,0,29,232,1,0,0,0,31,241,1,0,0,0,33,247,1,0,0,0,
        35,253,1,0,0,0,37,257,1,0,0,0,39,262,1,0,0,0,41,268,1,0,0,0,43,270,
        1,0,0,0,45,272,1,0,0,0,47,274,1,0,0,0,49,276,1,0,0,0,51,278,1,0,
        0,0,53,281,1,0,0,0,55,284,1,0,0,0,57,287,1,0,0,0,59,289,1,0,0,0,
        61,292,1,0,0,0,63,294,1,0,0,0,65,297,1,0,0,0,67,300,1,0,0,0,69,303,
        1,0,0,0,71,305,1,0,0,0,73,307,1,0,0,0,75,310,1,0,0,0,77,313,1,0,
        0,0,79,316,1,0,0,0,81,319,1,0,0,0,83,322,1,0,0,0,85,324,1,0,0,0,
        87,326,1,0,0,0,89,328,1,0,0,0,91,330,1,0,0,0,93,332,1,0,0,0,95,334,
        1,0,0,0,97,336,1,0,0,0,99,338,1,0,0,0,101,340,1,0,0,0,103,342,1,
        0,0,0,105,353,1,0,0,0,107,363,1,0,0,0,109,369,1,0,0,0,111,380,1,
        0,0,0,113,391,1,0,0,0,115,398,1,0,0,0,117,400,1,0,0,0,119,402,1,
        0,0,0,121,404,1,0,0,0,123,431,1,0,0,0,125,433,1,0,0,0,127,447,1,
        0,0,0,129,449,1,0,0,0,131,460,1,0,0,0,133,462,1,0,0,0,135,465,1,
        0,0,0,137,468,1,0,0,0,139,479,1,0,0,0,141,495,1,0,0,0,143,502,1,
        0,0,0,145,506,1,0,0,0,147,509,1,0,0,0,149,523,1,0,0,0,151,152,5,
        105,0,0,152,153,5,102,0,0,153,2,1,0,0,0,154,155,5,101,0,0,155,156,
        5,108,0,0,156,157,5,115,0,0,157,158,5,101,0,0,158,4,1,0,0,0,159,
        160,5,102,0,0,160,161,5,111,0,0,161,162,5,114,0,0,162,6,1,0,0,0,
        163,164,5,114,0,0,164,165,5,101,0,0,165,166,5,116,0,0,166,167,5,
        117,0,0,167,168,5,114,0,0,168,169,5,110,0,0,169,8,1,0,0,0,170,171,
        5,102,0,0,171,172,5,117,0,0,172,173,5,110,0,0,173,174,5,99,0,0,174,
        10,1,0,0,0,175,176,5,116,0,0,176,177,5,121,0,0,177,178,5,112,0,0,
        178,179,5,101,0,0,179,12,1,0,0,0,180,181,5,115,0,0,181,182,5,116,
        0,0,182,183,5,114,0,0,183,184,5,117,0,0,184,185,5,99,0,0,185,186,
        5,116,0,0,186,14,1,0,0,0,187,188,5,105,0,0,188,189,5,110,0,0,189,
        190,5,116,0,0,190,191,5,101,0,0,191,192,5,114,0,0,192,193,5,102,
        0,0,193,194,5,97,0,0,194,195,5,99,0,0,195,196,5,101,0,0,196,16,1,
        0,0,0,197,198,5,115,0,0,198,199,5,116,0,0,199,200,5,114,0,0,200,
        201,5,105,0,0,201,202,5,110,0,0,202,203,5,103,0,0,203,18,1,0,0,0,
        204,205,5,105,0,0,205,206,5,110,0,0,206,207,5,116,0,0,207,20,1,0,
        0,0,208,209,5,102,0,0,209,210,5,108,0,0,210,211,5,111,0,0,211,212,
        5,97,0,0,212,213,5,116,0,0,213,22,1,0,0,0,214,215,5,98,0,0,215,216,
        5,111,0,0,216,217,5,111,0,0,217,218,5,108,0,0,218,219,5,101,0,0,
        219,220,5,97,0,0,220,221,5,110,0,0,221,24,1,0,0,0,222,223,5,99,0,
        0,223,224,5,111,0,0,224,225,5,110,0,0,225,226,5,115,0,0,226,227,
        5,116,0,0,227,26,1,0,0,0,228,229,5,118,0,0,229,230,5,97,0,0,230,
        231,5,114,0,0,231,28,1,0,0,0,232,233,5,99,0,0,233,234,5,111,0,0,
        234,235,5,110,0,0,235,236,5,116,0,0,236,237,5,105,0,0,237,238,5,
        110,0,0,238,239,5,117,0,0,239,240,5,101,0,0,240,30,1,0,0,0,241,242,
        5,98,0,0,242,243,5,114,0,0,243,244,5,101,0,0,244,245,5,97,0,0,245,
        246,5,107,0,0,246,32,1,0,0,0,247,248,5,114,0,0,248,249,5,97,0,0,
        249,250,5,110,0,0,250,251,5,103,0,0,251,252,5,101,0,0,252,34,1,0,
        0,0,253,254,5,110,0,0,254,255,5,105,0,0,255,256,5,108,0,0,256,36,
        1,0,0,0,257,258,5,116,0,0,258,259,5,114,0,0,259,260,5,117,0,0,260,
        261,5,101,0,0,261,38,1,0,0,0,262,263,5,102,0,0,263,264,5,97,0,0,
        264,265,5,108,0,0,265,266,5,115,0,0,266,267,5,101,0,0,267,40,1,0,
        0,0,268,269,5,43,0,0,269,42,1,0,0,0,270,271,5,45,0,0,271,44,1,0,
        0,0,272,273,5,42,0,0,273,46,1,0,0,0,274,275,5,47,0,0,275,48,1,0,
        0,0,276,277,5,37,0,0,277,50,1,0,0,0,278,279,5,58,0,0,279,280,5,61,
        0,0,280,52,1,0,0,0,281,282,5,61,0,0,282,283,5,61,0,0,283,54,1,0,
        0,0,284,285,5,33,0,0,285,286,5,61,0,0,286,56,1,0,0,0,287,288,5,60,
        0,0,288,58,1,0,0,0,289,290,5,60,0,0,290,291,5,61,0,0,291,60,1,0,
        0,0,292,293,5,62,0,0,293,62,1,0,0,0,294,295,5,62,0,0,295,296,5,61,
        0,0,296,64,1,0,0,0,297,298,5,38,0,0,298,299,5,38,0,0,299,66,1,0,
        0,0,300,301,5,124,0,0,301,302,5,124,0,0,302,68,1,0,0,0,303,304,5,
        33,0,0,304,70,1,0,0,0,305,306,5,61,0,0,306,72,1,0,0,0,307,308,5,
        43,0,0,308,309,5,61,0,0,309,74,1,0,0,0,310,311,5,45,0,0,311,312,
        5,61,0,0,312,76,1,0,0,0,313,314,5,42,0,0,314,315,5,61,0,0,315,78,
        1,0,0,0,316,317,5,47,0,0,317,318,5,61,0,0,318,80,1,0,0,0,319,320,
        5,37,0,0,320,321,5,61,0,0,321,82,1,0,0,0,322,323,5,46,0,0,323,84,
        1,0,0,0,324,325,5,40,0,0,325,86,1,0,0,0,326,327,5,41,0,0,327,88,
        1,0,0,0,328,329,5,123,0,0,329,90,1,0,0,0,330,331,5,125,0,0,331,92,
        1,0,0,0,332,333,5,91,0,0,333,94,1,0,0,0,334,335,5,93,0,0,335,96,
        1,0,0,0,336,337,5,44,0,0,337,98,1,0,0,0,338,339,5,59,0,0,339,100,
        1,0,0,0,340,341,5,58,0,0,341,102,1,0,0,0,342,346,7,0,0,0,343,345,
        7,1,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,
        1,0,0,0,347,104,1,0,0,0,348,346,1,0,0,0,349,354,3,107,53,0,350,354,
        3,109,54,0,351,354,3,111,55,0,352,354,3,113,56,0,353,349,1,0,0,0,
        353,350,1,0,0,0,353,351,1,0,0,0,353,352,1,0,0,0,354,106,1,0,0,0,
        355,364,3,115,57,0,356,360,7,2,0,0,357,359,3,115,57,0,358,357,1,
        0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,364,1,
        0,0,0,362,360,1,0,0,0,363,355,1,0,0,0,363,356,1,0,0,0,364,108,1,
        0,0,0,365,366,5,48,0,0,366,370,5,98,0,0,367,368,5,48,0,0,368,370,
        5,66,0,0,369,365,1,0,0,0,369,367,1,0,0,0,370,372,1,0,0,0,371,373,
        3,117,58,0,372,371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,375,
        1,0,0,0,375,110,1,0,0,0,376,377,5,48,0,0,377,381,5,111,0,0,378,379,
        5,48,0,0,379,381,5,79,0,0,380,376,1,0,0,0,380,378,1,0,0,0,381,383,
        1,0,0,0,382,384,3,119,59,0,383,382,1,0,0,0,384,385,1,0,0,0,385,383,
        1,0,0,0,385,386,1,0,0,0,386,112,1,0,0,0,387,388,5,48,0,0,388,392,
        5,120,0,0,389,390,5,48,0,0,390,392,5,88,0,0,391,387,1,0,0,0,391,
        389,1,0,0,0,392,394,1,0,0,0,393,395,3,121,60,0,394,393,1,0,0,0,395,
        396,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,114,1,0,0,0,398,
        399,7,3,0,0,399,116,1,0,0,0,400,401,7,4,0,0,401,118,1,0,0,0,402,
        403,7,5,0,0,403,120,1,0,0,0,404,405,7,6,0,0,405,122,1,0,0,0,406,
        415,3,115,57,0,407,411,7,2,0,0,408,410,3,115,57,0,409,408,1,0,0,
        0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,415,1,0,0,
        0,413,411,1,0,0,0,414,406,1,0,0,0,414,407,1,0,0,0,415,432,1,0,0,
        0,416,418,3,115,57,0,417,416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,
        0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,425,3,127,63,0,422,424,3,
        115,57,0,423,422,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,
        1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,428,430,3,125,62,0,429,428,
        1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,414,1,0,0,0,431,417,
        1,0,0,0,432,124,1,0,0,0,433,445,7,7,0,0,434,436,3,115,57,0,435,434,
        1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,446,
        1,0,0,0,439,441,7,8,0,0,440,442,3,115,57,0,441,440,1,0,0,0,442,443,
        1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,435,
        1,0,0,0,445,439,1,0,0,0,446,126,1,0,0,0,447,448,5,46,0,0,448,128,
        1,0,0,0,449,453,5,34,0,0,450,452,3,131,65,0,451,450,1,0,0,0,452,
        455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,
        453,1,0,0,0,456,457,5,34,0,0,457,130,1,0,0,0,458,461,8,9,0,0,459,
        461,3,133,66,0,460,458,1,0,0,0,460,459,1,0,0,0,461,132,1,0,0,0,462,
        463,5,92,0,0,463,464,7,10,0,0,464,134,1,0,0,0,465,466,5,92,0,0,466,
        467,8,10,0,0,467,136,1,0,0,0,468,469,5,47,0,0,469,470,5,47,0,0,470,
        474,1,0,0,0,471,473,8,11,0,0,472,471,1,0,0,0,473,476,1,0,0,0,474,
        472,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,474,1,0,0,0,477,
        478,6,68,0,0,478,138,1,0,0,0,479,480,5,47,0,0,480,481,5,42,0,0,481,
        486,1,0,0,0,482,485,3,139,69,0,483,485,9,0,0,0,484,482,1,0,0,0,484,
        483,1,0,0,0,485,488,1,0,0,0,486,487,1,0,0,0,486,484,1,0,0,0,487,
        489,1,0,0,0,488,486,1,0,0,0,489,490,5,42,0,0,490,491,5,47,0,0,491,
        492,1,0,0,0,492,493,6,69,0,0,493,140,1,0,0,0,494,496,7,12,0,0,495,
        494,1,0,0,0,496,497,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,
        499,1,0,0,0,499,500,6,70,0,0,500,142,1,0,0,0,501,503,5,13,0,0,502,
        501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,505,5,10,0,0,505,
        144,1,0,0,0,506,507,9,0,0,0,507,508,6,72,1,0,508,146,1,0,0,0,509,
        513,5,34,0,0,510,512,3,131,65,0,511,510,1,0,0,0,512,515,1,0,0,0,
        513,511,1,0,0,0,513,514,1,0,0,0,514,519,1,0,0,0,515,513,1,0,0,0,
        516,517,5,13,0,0,517,520,5,10,0,0,518,520,7,13,0,0,519,516,1,0,0,
        0,519,518,1,0,0,0,520,521,1,0,0,0,521,522,6,73,2,0,522,148,1,0,0,
        0,523,527,5,34,0,0,524,526,3,131,65,0,525,524,1,0,0,0,526,529,1,
        0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,527,1,
        0,0,0,530,531,3,135,67,0,531,532,6,74,3,0,532,150,1,0,0,0,30,0,346,
        353,360,363,369,374,380,385,391,396,411,414,419,425,429,431,437,
        443,445,453,460,474,484,486,497,502,513,519,527,4,6,0,0,1,72,0,1,
        73,1,1,74,2
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOL = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    NEWASS = 26
    EQ = 27
    NEQ = 28
    LT = 29
    LTE = 30
    GT = 31
    GTE = 32
    AND = 33
    OR = 34
    NEGATION = 35
    ASSIGN = 36
    ADDVAL = 37
    SUBVAL = 38
    MULVAL = 39
    DIVVAL = 40
    MODVAL = 41
    POINT = 42
    R_OPEN = 43
    R_CLOSE = 44
    CUR_OPEN = 45
    CUR_CLOSE = 46
    SQ_OPEN = 47
    SQ_CLOSE = 48
    COMMA = 49
    SEMI_COLON = 50
    COLON = 51
    ID = 52
    INT_LIT = 53
    FLOAT_LIT = 54
    STRING_LIT = 55
    CMTLINE = 56
    CMTBLOCK = 57
    WS = 58
    NEWLINE = 59
    ERROR_CHAR = 60
    UNCLOSE_STRING = 61
    ILLEGAL_ESCAPE = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "':='", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
            "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOL", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "NEWASS", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
            "AND", "OR", "NEGATION", "ASSIGN", "ADDVAL", "SUBVAL", "MULVAL", 
            "DIVVAL", "MODVAL", "POINT", "R_OPEN", "R_CLOSE", "CUR_OPEN", 
            "CUR_CLOSE", "SQ_OPEN", "SQ_CLOSE", "COMMA", "SEMI_COLON", "COLON", 
            "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "CMTLINE", "CMTBLOCK", 
            "WS", "NEWLINE", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOL", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "NEWASS", "EQ", "NEQ", 
                  "LT", "LTE", "GT", "GTE", "AND", "OR", "NEGATION", "ASSIGN", 
                  "ADDVAL", "SUBVAL", "MULVAL", "DIVVAL", "MODVAL", "POINT", 
                  "R_OPEN", "R_CLOSE", "CUR_OPEN", "CUR_CLOSE", "SQ_OPEN", 
                  "SQ_CLOSE", "COMMA", "SEMI_COLON", "COLON", "ID", "INT_LIT", 
                  "DEC_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", "DEC", "BIN", 
                  "OCT", "HEX", "FLOAT_LIT", "EXPO", "FP", "STRING_LIT", 
                  "STR_CHAR", "ESC_SEQ", "ESC_ILLEGAL", "CMTLINE", "CMTBLOCK", 
                  "WS", "NEWLINE", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self.preTokenType = None

    def emit(self):
        tk = self.type
        prevTk = self.preTokenType  # Store the previous token type
        self.preTokenType = tk  # Update preTokenType for next token

        # Handling newline conversion logic
        if tk == self.NEWLINE:
            # Convert \n to ; if preceded by specific tokens
            if prevTk in {self.ID, self.INT_LIT, self.FLOAT_LIT, self.TRUE, 
    					  self.FALSE, self.NIL, self.STRING_LIT, 
    					  self.STRING, self.INT, self.FLOAT, self.BOOL,
                          self.RETURN, self.CONTINUE, self.BREAK, 
                          self.R_CLOSE, self.SQ_CLOSE, self.CUR_CLOSE}:
                self.text = ";"  # Convert newline to semicolon
                self.type = self.SEMI_COLON  # Change token type
                return super().emit()
            else:
                self.skip()  # Ignore newline
                return self.nextToken()

        # Handling errors
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[72] = self.ERROR_CHAR_action 
            actions[73] = self.UNCLOSE_STRING_action 
            actions[74] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             
            if (len(self.text) >= 2 and self.text[-1] == '\n' and self.text == '\r'): 
            	raise UncloseString(self.text[:-2]) 
            elif (self.text[-1] == '\n'):
            	raise UncloseString(self.text[:-1]) 
            else: 
            	raise UncloseString(self.text) 

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
             
            temp = self.text 
            raise IllegalEscape(temp) 

     


